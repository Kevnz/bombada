if(typeof(exports)=='undefined')exports={};exports.board=(function(){var conf={getNewPiece:function(){throw('conf.getNewPiece must be set.');},piecesX:8,piecesY:8};var fns={};var pieces=[];var connect=function(from,to){from.swap(to);var matches=this.execMatches();this.sequence=1;if(matches){do{this.dropPieces();this.fillGaps();this.sequence++;}while(this.execMatches());var bla=this.getPossibleMatches(true);if(bla){}else{}
if(!this.getPossibleMatches())this.reset();}else{fire('invalid-move');from.swap(to);}};function getPiecesMatched(){var matches=[];var tile;for(var y=0;y<conf.piecesY;y++){for(var x=0;x<conf.piecesX;x++){tile=pieces[x][y];if(x<(conf.piecesX-2)){if((pieces[x+1][y]==tile)&&(pieces[x+2][y]==tile)){for(var i=x;i<conf.piecesX;i++){if(pieces[i][y]==tile){matches.push({x:i,y:y});}else{x=i;break;}}}}
if(y<(conf.piecesY-2)){if((pieces[x][y+1]==tile)&&(pieces[x][y+2]==tile)){for(i=y;i<conf.piecesY;i++){if(pieces[x][i]==tile){matches.push({x:x,y:i});}else{y=i;break;}}}}}}
return matches;};function fire(key){if(typeof(fns[key])=='function'){fns[key].apply(fns,Array.prototype.slice.apply(arguments,1));}};var formatMatch=function(type,x1,y1,x2,y2){return{type:type,x1:x1,y1:y1,x2:x2,y2:y2};};function get(key){return conf[key];};function set(key,value){conf[key]=value;};function getPieces(){return pieces;};function swapPieces(x1,y1,x2,y2){var tmp1=pieces[x1][y1];var tmp2=pieces[x2][y2];pieces[x1][y1]=tmp2;pieces[x2][y2]=tmp1;return pieces;};function on(key,fn){fns[key]=fn;};function getMatches(justBool){var coords=[];for(var y=0;y<conf.piecesY;y++){for(var x=0;x<conf.piecesX;x++){var piece=pieces[x][y];if(x<(conf.piecesX-2)){if((pieces[x+1][y]==piece)&&(pieces[x+2][y]==piece)){if(justBool){return true;}else{coords.push({x:x,y:y});}}}
if(y<(conf.piecesY-2)){if((pieces[x][y+1]==piece)&&(pieces[x][y+2]==piece)){if(justBool){return true;}else{coords.push({x:x,y:y});}}}}}
return(justBool?false:coords);};function hasMatches(){return getMatches(true);};function getPossibleMatches(justBool){var coords=[];for(var y=0;y<conf.piecesY;y++){for(var x=0;x<conf.piecesX;x++){var piece=pieces[x][y];if(x<(conf.piecesX-2)){if(x<(conf.piecesX-3)){if((pieces[x+1][y]==piece)&&(pieces[x+3][y]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(type,x+3,y,x+2,y));}}
if((pieces[x+2][y]==piece)&&(pieces[x+3][y]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x,y,x+1,y));}}}
if(y>0){if((pieces[x+1][y-1]==piece)&&(pieces[x+2][y-1]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x,y-1));}}
if((pieces[x+1][y-1]==piece)&&(pieces[x+2][y]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x+1,y-1,x+1,y));}}}
if(y<(conf.piecesY-1)){if((pieces[x+1][y+1]==piece)&&(pieces[x+2][y+1]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x,y+1));}}
if((pieces[x+1][y+1]==piece)&&(pieces[x+2][y]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x+1,y+1,x+1,y));}}}}
if(y<(conf.piecesY-2)){if(y<(conf.piecesY-3)){if((pieces[x][y+1]==piece)&&(pieces[x][y+3]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y+3,x,y+2));}}
if((pieces[x][y+2]==piece)&&(pieces[x][y+3]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x,y+1));}}}
if(x>0){if((pieces[x-1][y+1]==piece)&&(pieces[x-1][y+2]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x-1,y));}}
if((pieces[x-1][y+1]==piece)&&(pieces[x][y+2]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x-1,y+1,x,y+1));}}}
if(x<(conf.piecesX-1)){if((pieces[x+1][y+1]==piece)&&(pieces[x+1][y+2]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x,y,x+1,y));}}
if((pieces[x+1][y+1]==piece)&&(pieces[x][y+2]==piece)){if(justBool){return true;}else{coords.push(this.formatMatch(piece,x+1,y+1,x,y+1));}}}}}}
return(justBool||coords);};function hasPossibleMatches(){return getPossibleMatches(true);};function isAdjacent(x1,y1,x2,y2){return(((x1==x2)&&((y1==y2-1)||(y1==y2+1)))||((y1==y2)&&((x1==x2-1)||(x1==x2+1))));};function reset(){var attempts=0;do{pieces=[];for(var x=0;x<conf.piecesX;x++){pieces[x]=[];for(var y=0;y<conf.piecesY;y++){pieces[x].push(conf.getNewPiece());}}
attempts++;}while(hasMatches()||!hasPossibleMatches());return attempts;};return{get:get,set:set,getPieces:getPieces,getPiecesMatched:getPiecesMatched,getMatches:getMatches,hasMatches:hasMatches,isAdjacent:isAdjacent,on:on,reset:reset,swapPieces:swapPieces,};})();